{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "Pricefeedadress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pricefeedadress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperwithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfed097c8676436dbee845ed2e7780560cf6348faeb6bc919db304b9d66b27b62",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1026989",
    "logsBloom": "0x
    "blockHash": "0x69eb0a69962f82d5c25f6eecd97a4ff531c0eb80e8d869dd27fdeee6aa91aa6f",
    "transactionHash": "0xfed097c8676436dbee845ed2e7780560cf6348faeb6bc919db304b9d66b27b62",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1026989",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "aad80f9afbe9573fa80382819f02bcb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pricefeedadress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pricefeedadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperwithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fundme.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(\\r\\n        address pricefeedaddress\\r\\n    ) internal view returns (uint256) {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            pricefeedaddress\\r\\n        );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        address pricefeedaddress\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(pricefeedaddress);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xebdb87022707652afd363c5a3c5156ea859027c6db2da7fc1c73e666a48dd63e\",\"license\":\"MIT\"},\"contracts/fundme.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n    address[] public funders;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address public /* immutable */ i_owner;\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n    address public _pricefeedadress;\\r\\n    constructor(address Pricefeedadress) {\\r\\n        i_owner = msg.sender;\\r\\n        _pricefeedadress = Pricefeedadress;\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(msg.value.getConversionRate(_pricefeedadress) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        addressToAmountFunded[msg.sender] += msg.value;\\r\\n        funders.push(msg.sender);\\r\\n    }\\r\\n    \\r\\n   \\r\\n    \\r\\n    modifier onlyOwner {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert NotOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function withdraw() public onlyOwner {\\r\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\")   ;\\r\\n    }\\r\\n\\r\\n    function cheaperwithdraw() public onlyOwner{\\r\\n\\r\\n        address[] memory mfunders= funders;\\r\\n          for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\r\\n            address funder = mfunders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\")   ;\\r\\n\\r\\n    }\\r\\n    // Explainer from: https://solidity-by-example.org/fallback/\\r\\n    // Ether is sent to contract\\r\\n    //      is msg.data empty?\\r\\n    //          /   \\\\ \\r\\n    //         yes  no\\r\\n    //         /     \\\\\\r\\n    //    receive()?  fallback() \\r\\n    //     /   \\\\ \\r\\n    //   yes   no\\r\\n    //  /        \\\\\\r\\n    //receive()  fallback()\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x8892203ee60cb4a7077bb1be9591086f8099f4ef5b013a9418f9d9301db72680\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012383803806200123883398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b6110cc806200016c6000396000f3fe60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d42881461012e578063d89e94e514610138578063dba6335f14610163578063dc0d3dff1461018e5761008e565b80633ccfd60b146100985780633e47d6f3146100af57806367bf350b146100ec5780636b69a592146101035761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100ad610305565b005b3480156100bb57600080fd5b506100d660048036038101906100d19190610a7e565b610547565b6040516100e39190610ac4565b60405180910390f35b3480156100f857600080fd5b5061010161055f565b005b34801561010f57600080fd5b50610118610809565b6040516101259190610ac4565b60405180910390f35b6101366101cb565b005b34801561014457600080fd5b5061014d610816565b60405161015a9190610aee565b60405180910390f35b34801561016f57600080fd5b5061017861083c565b6040516101859190610aee565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610b35565b610862565b6040516101c29190610aee565b60405180910390f35b6802b5e3af16b188000061020a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a190919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610bbf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610c0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610437576000600182815481106103b2576103b1610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042f90610c93565b91505061038f565b50600067ffffffffffffffff81111561045357610452610cdc565b5b6040519080825280602002602001820160405280156104815781602001602082028036833780820191505090505b5060019080519060200190610497929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104be90610d3c565b60006040518083038185875af1925050503d80600081146104fb576040519150601f19603f3d011682016040523d82523d6000602084013e610500565b606091505b5050905080610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610d9d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e6576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b5050505050905060005b6001805490508110156106f857600082828151811061069657610695610c64565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106f090610c93565b915050610674565b50600067ffffffffffffffff81111561071457610713610cdc565b5b6040519080825280602002602001820160405280156107425781602001602082028036833780820191505090505b5060019080519060200190610758929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161077f90610d3c565b60006040518083038185875af1925050503d80600081146107bc576040519150601f19603f3d011682016040523d82523d6000602084013e6107c1565b606091505b5050905080610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90610d9d565b60405180910390fd5b5050565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061087257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806108ad836108dd565b90506000670de0b6b3a764000085836108c69190610dbd565b6108d09190610e46565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190610f04565b5050509150506402540be4008161096b9190610f7f565b92505050919050565b8280548282559060005260206000209081019282156109ed579160200282015b828111156109ec5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610994565b5b5090506109fa91906109fe565b5090565b5b80821115610a175760008160009055506001016109ff565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4b82610a20565b9050919050565b610a5b81610a40565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060208284031215610a9457610a93610a1b565b5b6000610aa284828501610a69565b91505092915050565b6000819050919050565b610abe81610aab565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b610ae881610a40565b82525050565b6000602082019050610b036000830184610adf565b92915050565b610b1281610aab565b8114610b1d57600080fd5b50565b600081359050610b2f81610b09565b92915050565b600060208284031215610b4b57610b4a610a1b565b5b6000610b5984828501610b20565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ba9601b83610b62565b9150610bb482610b73565b602082019050919050565b60006020820190508181036000830152610bd881610b9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1982610aab565b9150610c2483610aab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c5957610c58610bdf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c9e82610aab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd157610cd0610bdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d26600083610d0b565b9150610d3182610d16565b600082019050919050565b6000610d4782610d19565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d87600b83610b62565b9150610d9282610d51565b602082019050919050565b60006020820190508181036000830152610db681610d7a565b9050919050565b6000610dc882610aab565b9150610dd383610aab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0c57610e0b610bdf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5182610aab565b9150610e5c83610aab565b925082610e6c57610e6b610e17565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9681610e77565b8114610ea157600080fd5b50565b600081519050610eb381610e8d565b92915050565b6000819050919050565b610ecc81610eb9565b8114610ed757600080fd5b50565b600081519050610ee981610ec3565b92915050565b600081519050610efe81610b09565b92915050565b600080600080600060a08688031215610f2057610f1f610a1b565b5b6000610f2e88828901610ea4565b9550506020610f3f88828901610eda565b9450506040610f5088828901610eef565b9350506060610f6188828901610eef565b9250506080610f7288828901610ea4565b9150509295509295909350565b6000610f8a82610eb9565b9150610f9583610eb9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fd457610fd3610bdf565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101157611010610bdf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561104e5761104d610bdf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561108b5761108a610bdf565b5b82820290509291505056fea2646970667358221220fe38c99894592a035e214adf65d1e85612ea4006adf63fddd040b47aa7c67f3b64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d42881461012e578063d89e94e514610138578063dba6335f14610163578063dc0d3dff1461018e5761008e565b80633ccfd60b146100985780633e47d6f3146100af57806367bf350b146100ec5780636b69a592146101035761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100ad610305565b005b3480156100bb57600080fd5b506100d660048036038101906100d19190610a7e565b610547565b6040516100e39190610ac4565b60405180910390f35b3480156100f857600080fd5b5061010161055f565b005b34801561010f57600080fd5b50610118610809565b6040516101259190610ac4565b60405180910390f35b6101366101cb565b005b34801561014457600080fd5b5061014d610816565b60405161015a9190610aee565b60405180910390f35b34801561016f57600080fd5b5061017861083c565b6040516101859190610aee565b60405180910390f35b34801561019a57600080fd5b506101b560048036038101906101b09190610b35565b610862565b6040516101c29190610aee565b60405180910390f35b6802b5e3af16b188000061020a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a190919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610bbf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610c0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610437576000600182815481106103b2576103b1610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042f90610c93565b91505061038f565b50600067ffffffffffffffff81111561045357610452610cdc565b5b6040519080825280602002602001820160405280156104815781602001602082028036833780820191505090505b5060019080519060200190610497929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104be90610d3c565b60006040518083038185875af1925050503d80600081146104fb576040519150601f19603f3d011682016040523d82523d6000602084013e610500565b606091505b5050905080610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610d9d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e6576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b5050505050905060005b6001805490508110156106f857600082828151811061069657610695610c64565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106f090610c93565b915050610674565b50600067ffffffffffffffff81111561071457610713610cdc565b5b6040519080825280602002602001820160405280156107425781602001602082028036833780820191505090505b5060019080519060200190610758929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161077f90610d3c565b60006040518083038185875af1925050503d80600081146107bc576040519150601f19603f3d011682016040523d82523d6000602084013e6107c1565b606091505b5050905080610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90610d9d565b60405180910390fd5b5050565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061087257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806108ad836108dd565b90506000670de0b6b3a764000085836108c69190610dbd565b6108d09190610e46565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190610f04565b5050509150506402540be4008161096b9190610f7f565b92505050919050565b8280548282559060005260206000209081019282156109ed579160200282015b828111156109ec5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610994565b5b5090506109fa91906109fe565b5090565b5b80821115610a175760008160009055506001016109ff565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4b82610a20565b9050919050565b610a5b81610a40565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060208284031215610a9457610a93610a1b565b5b6000610aa284828501610a69565b91505092915050565b6000819050919050565b610abe81610aab565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b610ae881610a40565b82525050565b6000602082019050610b036000830184610adf565b92915050565b610b1281610aab565b8114610b1d57600080fd5b50565b600081359050610b2f81610b09565b92915050565b600060208284031215610b4b57610b4a610a1b565b5b6000610b5984828501610b20565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ba9601b83610b62565b9150610bb482610b73565b602082019050919050565b60006020820190508181036000830152610bd881610b9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1982610aab565b9150610c2483610aab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c5957610c58610bdf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c9e82610aab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd157610cd0610bdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d26600083610d0b565b9150610d3182610d16565b600082019050919050565b6000610d4782610d19565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d87600b83610b62565b9150610d9282610d51565b602082019050919050565b60006020820190508181036000830152610db681610d7a565b9050919050565b6000610dc882610aab565b9150610dd383610aab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0c57610e0b610bdf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5182610aab565b9150610e5c83610aab565b925082610e6c57610e6b610e17565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9681610e77565b8114610ea157600080fd5b50565b600081519050610eb381610e8d565b92915050565b6000819050919050565b610ecc81610eb9565b8114610ed757600080fd5b50565b600081519050610ee981610ec3565b92915050565b600081519050610efe81610b09565b92915050565b600080600080600060a08688031215610f2057610f1f610a1b565b5b6000610f2e88828901610ea4565b9550506020610f3f88828901610eda565b9450506040610f5088828901610eef565b9350506060610f6188828901610eef565b9250506080610f7288828901610ea4565b9150509295509295909350565b6000610f8a82610eb9565b9150610f9583610eb9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fd457610fd3610bdf565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101157611010610bdf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561104e5761104d610bdf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561108b5761108a610bdf565b5b82820290509291505056fea2646970667358221220fe38c99894592a035e214adf65d1e85612ea4006adf63fddd040b47aa7c67f3b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 117,
        "contract": "contracts/fundme.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 120,
        "contract": "contracts/fundme.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/fundme.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/fundme.sol:FundMe",
        "label": "_pricefeedadress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}